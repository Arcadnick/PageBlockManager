{"ast":null,"code":"var _jsxFileName = \"/Users/arcadnick/PageBlockManager/frontend/src/components/BlockEditor.jsx\",\n  _s = $RefreshSig$();\nimport { DndProvider } from 'react-dnd';\nimport React, { useState, useRef } from 'react';\nimport BlockField from './BlockField';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAX_BLOCKS_IN_ROW = 3;\nconst BlockEditor = () => {\n  _s();\n  const [fields, setFields] = useState([[{\n    number: 1,\n    content: ''\n  }]]);\n  const blockCounter = useRef(2);\n  const saveToDatabase = async () => {\n    try {\n      const response = await fetch('http://localhost:8000/api.php', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          action: 'save',\n          data: fields\n        })\n      });\n      if (response.ok) {\n        console.log(\"Data saved to the database successfully\");\n      } else {\n        console.error(\"Failed to save data\");\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  };\n  const loadFromDatabase = async () => {\n    try {\n      const response = await fetch('http://localhost:8000/api.php?action=load');\n      if (response.ok) {\n        const data = await response.json();\n        if (Array.isArray(data)) {\n          setFields(data);\n        } else {\n          alert(\"Данные не найдены в базе. Блоки останутся без изменений.\");\n          console.error(\"No data found in the database.\");\n        }\n      } else {\n        console.error(\"Failed to load data\");\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  };\n  const addBlockToField = rowIndex => {\n    const updatedFields = [...fields];\n    const row = updatedFields[rowIndex];\n    if (row.length < MAX_BLOCKS_IN_ROW) {\n      const newBlockNumber = blockCounter.current++;\n      row.push({\n        number: newBlockNumber,\n        content: ''\n      });\n      setFields(updatedFields);\n    }\n  };\n  const addFieldBelow = rowIndex => {\n    const updatedFields = [...fields];\n    updatedFields.splice(rowIndex + 1, 0, [{\n      number: blockCounter.current++,\n      content: ''\n    }]);\n    setFields(updatedFields);\n  };\n  const removeBlock = (rowIndex, blockIndex) => {\n    const updatedFields = fields.map((field, rIdx) => rIdx === rowIndex ? field.filter((_, bIdx) => bIdx !== blockIndex) : field).filter(field => field.length > 0);\n    setFields(updatedFields);\n  };\n  const moveBlock = (fromRowIndex, fromBlockIndex, toRowIndex, toBlockIndex) => {\n    const updatedFields = [...fields];\n    const fromRow = updatedFields[fromRowIndex];\n    const toRow = updatedFields[toRowIndex];\n    if (!fromRow || !fromRow[fromBlockIndex] || !toRow || !toRow[toBlockIndex]) {\n      return;\n    }\n    const temp = fromRow[fromBlockIndex];\n    fromRow[fromBlockIndex] = toRow[toBlockIndex];\n    toRow[toBlockIndex] = temp;\n    setFields(updatedFields);\n  };\n\n  // const saveToFile = () => {\n  //   const blob = new Blob([JSON.stringify(fields)], { type: 'application/json' });\n  //   const link = document.createElement('a');\n  //   link.href = URL.createObjectURL(blob);\n  //   link.download = 'blocks.json'; \n  //   link.click();\n  // };\n\n  // const uploadFromFile = (event) => {\n  //   const file = event.target.files[0];\n  //   if (!file) return;\n\n  //   const reader = new FileReader();\n  //   reader.onload = (e) => {\n  //     const data = JSON.parse(e.target.result); \n  //     setFields(data); \n  //     blockCounter.current = data.flat().length + 1; \n  //   };\n  //   reader.readAsText(file);\n  // };  \n\n  return /*#__PURE__*/_jsxDEV(DndProvider, {\n    backend: HTML5Backend,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          marginLeft: '5px'\n        },\n        onClick: saveToDatabase,\n        children: \"Save to DB\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          marginLeft: '5px'\n        },\n        onClick: loadFromDatabase,\n        children: \"Load from DB\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), fields.map((field, rowIndex) => /*#__PURE__*/_jsxDEV(BlockField, {\n        blocks: field,\n        onAddBlock: () => addBlockToField(rowIndex),\n        onAddField: () => addFieldBelow(rowIndex),\n        onRemoveBlock: blockIndex => removeBlock(rowIndex, blockIndex),\n        canAddRight: field.length < MAX_BLOCKS_IN_ROW,\n        moveBlock: moveBlock,\n        rowIndex: rowIndex\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n_s(BlockEditor, \"WXI5tfSI202PgNgCBIgzratO+iQ=\");\n_c = BlockEditor;\nexport default BlockEditor;\nvar _c;\n$RefreshReg$(_c, \"BlockEditor\");","map":{"version":3,"names":["DndProvider","React","useState","useRef","BlockField","HTML5Backend","jsxDEV","_jsxDEV","MAX_BLOCKS_IN_ROW","BlockEditor","_s","fields","setFields","number","content","blockCounter","saveToDatabase","response","fetch","method","headers","body","JSON","stringify","action","data","ok","console","log","error","loadFromDatabase","json","Array","isArray","alert","addBlockToField","rowIndex","updatedFields","row","length","newBlockNumber","current","push","addFieldBelow","splice","removeBlock","blockIndex","map","field","rIdx","filter","_","bIdx","moveBlock","fromRowIndex","fromBlockIndex","toRowIndex","toBlockIndex","fromRow","toRow","temp","backend","children","style","marginLeft","onClick","fileName","_jsxFileName","lineNumber","columnNumber","blocks","onAddBlock","onAddField","onRemoveBlock","canAddRight","_c","$RefreshReg$"],"sources":["/Users/arcadnick/PageBlockManager/frontend/src/components/BlockEditor.jsx"],"sourcesContent":["import { DndProvider } from 'react-dnd';\nimport React, { useState, useRef } from 'react';\nimport BlockField from './BlockField';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nconst MAX_BLOCKS_IN_ROW = 3;\n\nconst BlockEditor = () => {\n  const [fields, setFields] = useState([[{number: 1, content: '' }]]);\n  const blockCounter = useRef(2); \n\n  const saveToDatabase = async () => {\n    try {\n      const response = await fetch('http://localhost:8000/api.php', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ action: 'save', data: fields })\n      });\n      \n      if (response.ok) {\n        console.log(\"Data saved to the database successfully\");\n      } else {\n        console.error(\"Failed to save data\");\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n};\n\nconst loadFromDatabase = async () => {\n  try {\n    const response = await fetch('http://localhost:8000/api.php?action=load');\n    if (response.ok) {\n      const data = await response.json();\n\n\n      if (Array.isArray(data)) {\n        setFields(data);\n      } else {\n        alert(\"Данные не найдены в базе. Блоки останутся без изменений.\");\n        console.error(\"No data found in the database.\");\n      }\n    } else {\n      console.error(\"Failed to load data\");\n    }\n  } catch (error) {\n    console.error(\"Error:\", error);\n  }\n};\n\n  const addBlockToField = (rowIndex) => {\n    const updatedFields = [...fields];\n    const row = updatedFields[rowIndex];\n    if (row.length < MAX_BLOCKS_IN_ROW) {\n      const newBlockNumber = blockCounter.current++; \n      row.push({ number: newBlockNumber, content: '' });\n      setFields(updatedFields);\n    }\n  };\n\n  const addFieldBelow = (rowIndex) => {\n    const updatedFields = [...fields];\n    updatedFields.splice(rowIndex + 1, 0, [{ number: blockCounter.current++, content: '' }]);\n    setFields(updatedFields);\n  };\n\n  const removeBlock = (rowIndex, blockIndex) => {\n    const updatedFields = fields\n      .map((field, rIdx) =>\n        rIdx === rowIndex ? field.filter((_, bIdx) => bIdx !== blockIndex) : field\n      )\n      .filter((field) => field.length > 0);\n    setFields(updatedFields);\n  };\n\n  const moveBlock = (fromRowIndex, fromBlockIndex, toRowIndex, toBlockIndex) => {\n    const updatedFields = [...fields];\n    const fromRow = updatedFields[fromRowIndex];\n    const toRow = updatedFields[toRowIndex];\n  \n    if (!fromRow || !fromRow[fromBlockIndex] || !toRow || !toRow[toBlockIndex]) {\n      return;\n    }\n  \n    const temp = fromRow[fromBlockIndex];\n    fromRow[fromBlockIndex] = toRow[toBlockIndex];\n    toRow[toBlockIndex] = temp;\n  \n    setFields(updatedFields);\n  };\n\n  // const saveToFile = () => {\n  //   const blob = new Blob([JSON.stringify(fields)], { type: 'application/json' });\n  //   const link = document.createElement('a');\n  //   link.href = URL.createObjectURL(blob);\n  //   link.download = 'blocks.json'; \n  //   link.click();\n  // };\n\n  // const uploadFromFile = (event) => {\n  //   const file = event.target.files[0];\n  //   if (!file) return;\n    \n  //   const reader = new FileReader();\n  //   reader.onload = (e) => {\n  //     const data = JSON.parse(e.target.result); \n  //     setFields(data); \n  //     blockCounter.current = data.flat().length + 1; \n  //   };\n  //   reader.readAsText(file);\n  // };  \n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <div>\n        <button style={{ marginLeft: '5px' }} onClick={saveToDatabase}>Save to DB</button>\n        <button style={{ marginLeft: '5px' }} onClick={loadFromDatabase}>Load from DB</button>\n        {/* <button style={{ marginLeft: '25px' }} onClick={saveToFile}>Save to file</button> \n        <label style={{ marginLeft: '5px' }}>\n          <input type=\"file\" onChange={uploadFromFile}/>\n        </label> */}\n        {fields.map((field, rowIndex) => (\n          <BlockField\n            key={rowIndex}\n            blocks={field}\n            onAddBlock={() => addBlockToField(rowIndex)}\n            onAddField={() => addFieldBelow(rowIndex)}\n            onRemoveBlock={(blockIndex) => removeBlock(rowIndex, blockIndex)}\n            canAddRight={field.length < MAX_BLOCKS_IN_ROW}\n            moveBlock={moveBlock}\n            rowIndex={rowIndex} \n          />\n        ))}\n      </div>\n    </DndProvider>\n  );\n};\nexport default BlockEditor;"],"mappings":";;AAAA,SAASA,WAAW,QAAQ,WAAW;AACvC,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC/C,OAAOC,UAAU,MAAM,cAAc;AACrC,SAASC,YAAY,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,MAAMC,iBAAiB,GAAG,CAAC;AAE3B,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;IAACW,MAAM,EAAE,CAAC;IAAEC,OAAO,EAAE;EAAG,CAAC,CAAC,CAAC,CAAC;EACnE,MAAMC,YAAY,GAAGZ,MAAM,CAAC,CAAC,CAAC;EAE9B,MAAMa,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAE;QAC5DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,MAAM,EAAE,MAAM;UAAEC,IAAI,EAAEd;QAAO,CAAC;MACvD,CAAC,CAAC;MAEF,IAAIM,QAAQ,CAACS,EAAE,EAAE;QACfC,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;MACxD,CAAC,MAAM;QACLD,OAAO,CAACE,KAAK,CAAC,qBAAqB,CAAC;MACtC;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC;EACJ,CAAC;EAED,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI;MACF,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,2CAA2C,CAAC;MACzE,IAAID,QAAQ,CAACS,EAAE,EAAE;QACf,MAAMD,IAAI,GAAG,MAAMR,QAAQ,CAACc,IAAI,CAAC,CAAC;QAGlC,IAAIC,KAAK,CAACC,OAAO,CAACR,IAAI,CAAC,EAAE;UACvBb,SAAS,CAACa,IAAI,CAAC;QACjB,CAAC,MAAM;UACLS,KAAK,CAAC,0DAA0D,CAAC;UACjEP,OAAO,CAACE,KAAK,CAAC,gCAAgC,CAAC;QACjD;MACF,CAAC,MAAM;QACLF,OAAO,CAACE,KAAK,CAAC,qBAAqB,CAAC;MACtC;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC;EACF,CAAC;EAEC,MAAMM,eAAe,GAAIC,QAAQ,IAAK;IACpC,MAAMC,aAAa,GAAG,CAAC,GAAG1B,MAAM,CAAC;IACjC,MAAM2B,GAAG,GAAGD,aAAa,CAACD,QAAQ,CAAC;IACnC,IAAIE,GAAG,CAACC,MAAM,GAAG/B,iBAAiB,EAAE;MAClC,MAAMgC,cAAc,GAAGzB,YAAY,CAAC0B,OAAO,EAAE;MAC7CH,GAAG,CAACI,IAAI,CAAC;QAAE7B,MAAM,EAAE2B,cAAc;QAAE1B,OAAO,EAAE;MAAG,CAAC,CAAC;MACjDF,SAAS,CAACyB,aAAa,CAAC;IAC1B;EACF,CAAC;EAED,MAAMM,aAAa,GAAIP,QAAQ,IAAK;IAClC,MAAMC,aAAa,GAAG,CAAC,GAAG1B,MAAM,CAAC;IACjC0B,aAAa,CAACO,MAAM,CAACR,QAAQ,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC;MAAEvB,MAAM,EAAEE,YAAY,CAAC0B,OAAO,EAAE;MAAE3B,OAAO,EAAE;IAAG,CAAC,CAAC,CAAC;IACxFF,SAAS,CAACyB,aAAa,CAAC;EAC1B,CAAC;EAED,MAAMQ,WAAW,GAAGA,CAACT,QAAQ,EAAEU,UAAU,KAAK;IAC5C,MAAMT,aAAa,GAAG1B,MAAM,CACzBoC,GAAG,CAAC,CAACC,KAAK,EAAEC,IAAI,KACfA,IAAI,KAAKb,QAAQ,GAAGY,KAAK,CAACE,MAAM,CAAC,CAACC,CAAC,EAAEC,IAAI,KAAKA,IAAI,KAAKN,UAAU,CAAC,GAAGE,KACvE,CAAC,CACAE,MAAM,CAAEF,KAAK,IAAKA,KAAK,CAACT,MAAM,GAAG,CAAC,CAAC;IACtC3B,SAAS,CAACyB,aAAa,CAAC;EAC1B,CAAC;EAED,MAAMgB,SAAS,GAAGA,CAACC,YAAY,EAAEC,cAAc,EAAEC,UAAU,EAAEC,YAAY,KAAK;IAC5E,MAAMpB,aAAa,GAAG,CAAC,GAAG1B,MAAM,CAAC;IACjC,MAAM+C,OAAO,GAAGrB,aAAa,CAACiB,YAAY,CAAC;IAC3C,MAAMK,KAAK,GAAGtB,aAAa,CAACmB,UAAU,CAAC;IAEvC,IAAI,CAACE,OAAO,IAAI,CAACA,OAAO,CAACH,cAAc,CAAC,IAAI,CAACI,KAAK,IAAI,CAACA,KAAK,CAACF,YAAY,CAAC,EAAE;MAC1E;IACF;IAEA,MAAMG,IAAI,GAAGF,OAAO,CAACH,cAAc,CAAC;IACpCG,OAAO,CAACH,cAAc,CAAC,GAAGI,KAAK,CAACF,YAAY,CAAC;IAC7CE,KAAK,CAACF,YAAY,CAAC,GAAGG,IAAI;IAE1BhD,SAAS,CAACyB,aAAa,CAAC;EAC1B,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACE9B,OAAA,CAACP,WAAW;IAAC6D,OAAO,EAAExD,YAAa;IAAAyD,QAAA,eACjCvD,OAAA;MAAAuD,QAAA,gBACEvD,OAAA;QAAQwD,KAAK,EAAE;UAAEC,UAAU,EAAE;QAAM,CAAE;QAACC,OAAO,EAAEjD,cAAe;QAAA8C,QAAA,EAAC;MAAU;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAClF9D,OAAA;QAAQwD,KAAK,EAAE;UAAEC,UAAU,EAAE;QAAM,CAAE;QAACC,OAAO,EAAEnC,gBAAiB;QAAAgC,QAAA,EAAC;MAAY;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EAKrF1D,MAAM,CAACoC,GAAG,CAAC,CAACC,KAAK,EAAEZ,QAAQ,kBAC1B7B,OAAA,CAACH,UAAU;QAETkE,MAAM,EAAEtB,KAAM;QACduB,UAAU,EAAEA,CAAA,KAAMpC,eAAe,CAACC,QAAQ,CAAE;QAC5CoC,UAAU,EAAEA,CAAA,KAAM7B,aAAa,CAACP,QAAQ,CAAE;QAC1CqC,aAAa,EAAG3B,UAAU,IAAKD,WAAW,CAACT,QAAQ,EAAEU,UAAU,CAAE;QACjE4B,WAAW,EAAE1B,KAAK,CAACT,MAAM,GAAG/B,iBAAkB;QAC9C6C,SAAS,EAAEA,SAAU;QACrBjB,QAAQ,EAAEA;MAAS,GAPdA,QAAQ;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAQd,CACF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAElB,CAAC;AAAC3D,EAAA,CAjIID,WAAW;AAAAkE,EAAA,GAAXlE,WAAW;AAkIjB,eAAeA,WAAW;AAAC,IAAAkE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}