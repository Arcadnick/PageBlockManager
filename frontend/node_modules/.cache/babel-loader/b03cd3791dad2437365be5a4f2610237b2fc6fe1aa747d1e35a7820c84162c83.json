{"ast":null,"code":"var _jsxFileName = \"/Users/arcadnick/PageBlockManager/frontend/src/components/BlockEditor.jsx\",\n  _s = $RefreshSig$();\nimport { DndProvider } from 'react-dnd';\nimport React, { useState, useRef } from 'react';\nimport BlockField from './BlockField';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAX_BLOCKS_IN_ROW = 3;\nconst BlockEditor = () => {\n  _s();\n  const [fields, setFields] = useState([[{\n    number: 1,\n    content: ''\n  }]]);\n  const [selectedBlock, setSelectedBlock] = useState(null);\n  const [textareaValue, setTextareaValue] = useState('');\n  const blockCounter = useRef(2);\n  const saveToDatabase = async () => {\n    try {\n      const response = await fetch('http://localhost:8000/api.php', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          action: 'save',\n          data: fields\n        })\n      });\n      if (response.ok) {\n        console.log(\"Data saved to the database successfully\");\n      } else {\n        console.error(\"Failed to save data\");\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  };\n  const loadFromDatabase = async () => {\n    try {\n      const response = await fetch('http://localhost:8000/api.php?action=load');\n      if (response.ok) {\n        const data = await response.json();\n        if (Array.isArray(data) && data.length > 0) {\n          setFields(data);\n        } else {\n          alert(\"Данные не найдены в базе. Блоки останутся без изменений.\");\n          console.error(\"No data found in the database.\");\n        }\n      } else {\n        console.error(\"Failed to load data\");\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  };\n  const addBlockToField = rowIndex => {\n    const updatedFields = [...fields];\n    const row = updatedFields[rowIndex];\n    if (row.length < MAX_BLOCKS_IN_ROW) {\n      const newBlockNumber = blockCounter.current++;\n      row.push({\n        number: newBlockNumber,\n        content: ''\n      });\n      setFields(updatedFields);\n    }\n  };\n  const addFieldBelow = rowIndex => {\n    const updatedFields = [...fields];\n    updatedFields.splice(rowIndex + 1, 0, [{\n      number: blockCounter.current++,\n      content: ''\n    }]);\n    setFields(updatedFields);\n  };\n  const removeBlock = (rowIndex, blockIndex) => {\n    const updatedFields = fields.map((field, rIdx) => rIdx === rowIndex ? field.filter((_, bIdx) => bIdx !== blockIndex) : field).filter(field => field.length > 0);\n    setFields(updatedFields);\n  };\n  const moveBlock = (fromRowIndex, fromBlockIndex, toRowIndex, toBlockIndex) => {\n    const updatedFields = [...fields];\n    const fromRow = updatedFields[fromRowIndex];\n    const toRow = updatedFields[toRowIndex];\n    if (!fromRow || !fromRow[fromBlockIndex] || !toRow || !toRow[toBlockIndex]) {\n      return;\n    }\n    const temp = fromRow[fromBlockIndex];\n    fromRow[fromBlockIndex] = toRow[toBlockIndex];\n    toRow[toBlockIndex] = temp;\n    setFields(updatedFields);\n  };\n  const handleBlockClick = (rowIndex, blockIndex) => {\n    const block = fields[rowIndex][blockIndex];\n    setSelectedBlock({\n      rowIndex,\n      blockIndex\n    });\n    setTextareaValue(block.content);\n  };\n  const handleTextareaChange = event => {\n    setTextareaValue(event.target.value);\n  };\n  const saveContentChange = () => {\n    if (selectedBlock) {\n      const updatedFields = [...fields];\n      const {\n        rowIndex,\n        blockIndex\n      } = selectedBlock;\n      updatedFields[rowIndex][blockIndex].content = textareaValue;\n      setFields(updatedFields);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editor-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"content-editor\",\n        value: textareaValue,\n        onChange: handleTextareaChange,\n        placeholder: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0431\\u043B\\u043E\\u043A \\u0434\\u043B\\u044F \\u0440\\u0435\\u0434\\u0430\\u043A\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u0438\\u044F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          width: '120px'\n        },\n        onClick: saveContentChange,\n        children: \"Save Content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DndProvider, {\n      backend: HTML5Backend,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"block-manager\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: saveToDatabase,\n          children: \"Save to DB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            marginTop: '5px'\n          },\n          onClick: loadFromDatabase,\n          children: \"Load from DB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), fields.map((field, rowIndex) => /*#__PURE__*/_jsxDEV(BlockField, {\n          blocks: field,\n          onAddBlock: () => addBlockToField(rowIndex),\n          onAddField: () => addFieldBelow(rowIndex),\n          onRemoveBlock: blockIndex => removeBlock(rowIndex, blockIndex),\n          canAddRight: field.length < MAX_BLOCKS_IN_ROW,\n          moveBlock: moveBlock,\n          rowIndex: rowIndex\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n_s(BlockEditor, \"7o4uygxqgPDtQnE4olhnolrdPVc=\");\n_c = BlockEditor;\nexport default BlockEditor;\nvar _c;\n$RefreshReg$(_c, \"BlockEditor\");","map":{"version":3,"names":["DndProvider","React","useState","useRef","BlockField","HTML5Backend","jsxDEV","_jsxDEV","MAX_BLOCKS_IN_ROW","BlockEditor","_s","fields","setFields","number","content","selectedBlock","setSelectedBlock","textareaValue","setTextareaValue","blockCounter","saveToDatabase","response","fetch","method","headers","body","JSON","stringify","action","data","ok","console","log","error","loadFromDatabase","json","Array","isArray","length","alert","addBlockToField","rowIndex","updatedFields","row","newBlockNumber","current","push","addFieldBelow","splice","removeBlock","blockIndex","map","field","rIdx","filter","_","bIdx","moveBlock","fromRowIndex","fromBlockIndex","toRowIndex","toBlockIndex","fromRow","toRow","temp","handleBlockClick","block","handleTextareaChange","event","target","value","saveContentChange","children","className","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","style","width","onClick","backend","marginTop","blocks","onAddBlock","onAddField","onRemoveBlock","canAddRight","_c","$RefreshReg$"],"sources":["/Users/arcadnick/PageBlockManager/frontend/src/components/BlockEditor.jsx"],"sourcesContent":["import { DndProvider } from 'react-dnd';\nimport React, { useState, useRef } from 'react';\nimport BlockField from './BlockField';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nconst MAX_BLOCKS_IN_ROW = 3;\n\nconst BlockEditor = () => {\n  const [fields, setFields] = useState([[{number: 1, content: '' }]]);\n  const [selectedBlock, setSelectedBlock] = useState(null); \n  const [textareaValue, setTextareaValue] = useState('');\n  const blockCounter = useRef(2); \n\n  const saveToDatabase = async () => {\n    try {\n      const response = await fetch('http://localhost:8000/api.php', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ action: 'save', data: fields })\n      });\n      \n      if (response.ok) {\n        console.log(\"Data saved to the database successfully\");\n      } else {\n        console.error(\"Failed to save data\");\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n};\n\nconst loadFromDatabase = async () => {\n  try {\n    const response = await fetch('http://localhost:8000/api.php?action=load');\n    if (response.ok) {\n      const data = await response.json();\n\n      if (Array.isArray(data) && data.length > 0) {\n        setFields(data);\n      } else {\n        alert(\"Данные не найдены в базе. Блоки останутся без изменений.\");\n        console.error(\"No data found in the database.\");\n      }\n    } else {\n      console.error(\"Failed to load data\");\n    }\n  } catch (error) {\n    console.error(\"Error:\", error);\n  }\n};\n\n  const addBlockToField = (rowIndex) => {\n    const updatedFields = [...fields];\n    const row = updatedFields[rowIndex];\n    if (row.length < MAX_BLOCKS_IN_ROW) {\n      const newBlockNumber = blockCounter.current++; \n      row.push({ number: newBlockNumber, content: '' });\n      setFields(updatedFields);\n    }\n  };\n\n  const addFieldBelow = (rowIndex) => {\n    const updatedFields = [...fields];\n    updatedFields.splice(rowIndex + 1, 0, [{ number: blockCounter.current++, content: '' }]);\n    setFields(updatedFields);\n  };\n\n  const removeBlock = (rowIndex, blockIndex) => {\n    const updatedFields = fields\n      .map((field, rIdx) =>\n        rIdx === rowIndex ? field.filter((_, bIdx) => bIdx !== blockIndex) : field\n      )\n      .filter((field) => field.length > 0);\n    setFields(updatedFields);\n  };\n\n  const moveBlock = (fromRowIndex, fromBlockIndex, toRowIndex, toBlockIndex) => {\n    const updatedFields = [...fields];\n    const fromRow = updatedFields[fromRowIndex];\n    const toRow = updatedFields[toRowIndex];\n  \n    if (!fromRow || !fromRow[fromBlockIndex] || !toRow || !toRow[toBlockIndex]) {\n      return;\n    }\n  \n    const temp = fromRow[fromBlockIndex];\n    fromRow[fromBlockIndex] = toRow[toBlockIndex];\n    toRow[toBlockIndex] = temp;\n  \n    setFields(updatedFields);\n  };\n\n  const handleBlockClick = (rowIndex, blockIndex) => {\n    const block = fields[rowIndex][blockIndex];\n    setSelectedBlock({ rowIndex, blockIndex });\n    setTextareaValue(block.content);\n  };\n\n  const handleTextareaChange = (event) => {\n    setTextareaValue(event.target.value);\n  };\n\n  const saveContentChange = () => {\n    if (selectedBlock) {\n      const updatedFields = [...fields];\n      const { rowIndex, blockIndex } = selectedBlock;\n      updatedFields[rowIndex][blockIndex].content = textareaValue;\n      setFields(updatedFields);\n    }\n  };\n\n  return (\n    <div>\n      <div className='editor-container'>\n        <textarea \n          className='content-editor'\n          value={textareaValue}\n          onChange={handleTextareaChange}\n          placeholder=\"Выберите блок для редактирования\"\n        ></textarea>\n        <button style={{ width: '120px' }} onClick={saveContentChange}>Save Content</button>\n      </div>\n      <DndProvider backend={HTML5Backend}>\n        <div className='block-manager'>\n          <button onClick={saveToDatabase}>Save to DB</button>\n          <button style={{ marginTop: '5px' }} onClick={loadFromDatabase}>Load from DB</button>\n          {fields.map((field, rowIndex) => (\n            <BlockField\n              key={rowIndex}\n              blocks={field}\n              onAddBlock={() => addBlockToField(rowIndex)}\n              onAddField={() => addFieldBelow(rowIndex)}\n              onRemoveBlock={(blockIndex) => removeBlock(rowIndex, blockIndex)}\n              canAddRight={field.length < MAX_BLOCKS_IN_ROW}\n              moveBlock={moveBlock}\n              rowIndex={rowIndex} \n            />\n          ))}\n        </div>\n      </DndProvider>\n    </div>\n  );\n};\nexport default BlockEditor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}